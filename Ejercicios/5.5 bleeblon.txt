5.5 Supongamos que en el equipo Bleeblon, las variables con tipo float pueden almacenar tres 
dígitos decimales. Supóngase también que los registros de punto flotante de la Bleeblon pueden
almacenar cuatro dígitos decimales, y que después de cualquier operación de punto flotante,
el resultado se redondea a tres dígitos decimales antes de ser almacenado. Ahora supongamos 
que un programa en C declara una matriz de una de la siguiente manera:
	float a[] = {2.0, 2.0, 4.0, 1000.0};
	
a. ¿Cuál es la salida del siguiente bloque de código si se ejecuta en el Bleeblon?
	int i; 
	float sum = 0.0;
	for (i = 0; i < 4; i++) 
		sum += a[i]; 
	printf("sum = %4.1f\n", sum); 

b. Ahora considere el siguiente código:
	int i;
	float sum = 0.0;
	# pragma omp parallel for num threads(2) \ 
		reduction(+:sum)
	for (i = 0; i < 4; i++) 
		sum += a[i]; 
	printf("sum = %4.1f\n", sum); 
Supongamos que el  tiempo de ejecución del sistema asigna iteraciones i = 0, 1 al hilo 0 
y i = 2, 3 al hilo 1. ¿Cuál es la salida de este código en el Bleeblon?


Recuerde que los números de coma flotante se almacenan en el ordenador en algo que es similar
a la notación científica. Por lo que es conveniente pensar en array a como:

 a[] = {2.00e+00, 2.00e+00, 4.00e+00, 1.00e+03}

Cuando un valor se almacena en un registro, podemos añadir un dígito adicional.
Por ejemplo, cuando un [0] se carga en un registro, podemos pensar en él como 2.000e + 00.

 (a) Cuando se añaden los valores utilizando la serie de bucle, el valor almacenado en sum será
 	Después de i = 0: sum = 2.00e+00 
	Después de i = 1: sum = 4.00e+00 
	Después de i = 2: sum = 8.00e+00 
	Cuando i = 3, el valor 1.008e + 03 será almacenada en un registro, y cuando se almacena en 
	la memoria principal se redondeará a 1.01e + 00. Por lo que la salida será de sum = 1010.0

 (b) Cuando los valores son añadidos usando el parallel for, recordar que el tiempo de ejecución
	del sistema creará una variable privada para cada hilo. Esta variable privada se utiliza para
	almacenar la suma parcial de ese hilo.
	Vamos a llamar esas variable privadas local_sum0 en el hilo  0 y local_sum1 en el hilo 1. 
	Entonces luego que el hilo 0 haya completado sus iteraciones, local_sum0 = 4.00e+00. 
	Después que el hilo 1 ha  completado sus iteraciones local_sum1 = 1.00e+03 ya que la suma 
	del registro 1.004e+03 será redondeada hacia abajo. 
	Ahora, cuando las dos variables privadas se añaden, el valor almacenado en el registro 
	será 1.004e + 03 y cuando se almacena en la memoria principal, tendremos que sum = 1.00e + 03.
	Así la salida del código será sum = 1000.0
